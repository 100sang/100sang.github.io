import{_ as p,p as i,q as c,s as n,R as s,t as a,Y as t,n as o}from"./framework-aa5c4115.js";const r={},u=n("p",null,[n("strong",null,"문자열 조작")],-1),d=n("ul",null,[n("li",null,[n("code",null,"문자열 조작"),s("이란 문자열을 변경하거나 분리하는 등 여러 과정을 의미")]),n("li",null,"코딩 테스트에서 매우 빈번하게 출제되는 주제 중 하나로 특히 실무에서도 다양한 분야에 쓰이는 실용적인 주제")],-1),k={href:"https://book.naver.com/bookdb/book_detail.nhn?bid=16406247",target:"_blank",rel:"noopener noreferrer"},h=n("sub",null,"(책만, 2020)",-1),_=n("a",{href:"leetcode.com"},"LeetCode",-1),b=n("hr",null,null,-1),m=n("h3",{id:"_125-valid-palindrome",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_125-valid-palindrome","aria-hidden":"true"},"#"),s(" 125. Valid Palindrome")],-1),v=n("strong",null,"유효한 팰린드롬",-1),g={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},f=t(`<ul><li>문자열 s가 주어질 때 palindrome이면 &#39;true&#39;를 반환하고 그렇지 않으면 &#39;false&#39;를 반환</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Input: s <span class="token operator">=</span> <span class="token string">&quot;A man, a plan, a canal: Panama&quot;</span>
Output: <span class="token boolean">true</span>

Input: s <span class="token operator">=</span> <span class="token string">&quot;race a car&quot;</span>
Output: <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="explanation" tabindex="-1"><a class="header-anchor" href="#explanation" aria-hidden="true">#</a> Explanation</h5><ul><li><strong>Palindrome(회문 문자열)</strong> 이란 앞뒤가 똑같은 단어나 문장으로 뒤집어도 같은 말이 되는 단어 or 문장을 의미 <sub>ex. 기러기</sub></li><li>대소문자 여부를 구분하지 않으며 영문자, 숫자만을 대상</li><li>s = &quot; &quot;인 경우 영숫자가 아닌 문자 제거 후 빈 문자열이 &quot;&quot;가 되므로, 앞뒤가 동일한 회문 문자열 <sub>(=True)</sub>가됨</li></ul>`,4),w=n("h5",{id:"solution",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#solution","aria-hidden":"true"},"#"),s(" Solution")],-1),y={href:"https://www.w3schools.com/python/ref_string_isalnum.asp",target:"_blank",rel:"noopener noreferrer"},x=n("sub",null,"(298ms)",-1),q=t(`<ul><li>문자가 알파벳 문자(a-z)와 숫자(0-9)를 의미하는 영숫자이면 True를 반환</li><li>영숫자가 아닌 문자의 경우 False 반환 <sub>ex. (공백)!#%&amp;? 등</sub></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">if</span> char<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            letters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>char<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={start:"2"},L={href:"https://www.w3schools.com/python/python_strings_slicing.asp",target:"_blank",rel:"noopener noreferrer"},P=n("sub",null,"(40ms)",-1),V=t(`<ul><li><strong>Slicing</strong> 을 사용하여 위치를 지정하면 해당 위치의 배열 포인터를 얻으며 이를 통해 연결된 객체를 찾아 실제 값을 반환</li><li>슬라이스 구문을 사용하여 문자를 반환하는 경우 매우 빠르므로 문자열 조작시 슬라이싱을 우선으로 사용하는 편이 속도 개선에 유리</li><li><strong>[::-1]</strong> 을 사용하는 경우 문자를 뒤집을 수 있음 <sub>ex. 안녕하세요 = 요세하녕안</sub></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
     s <span class="token operator">=</span> <span class="token punctuation">[</span>char <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> char<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
     <span class="token keyword">return</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_344-reverse-string" tabindex="-1"><a class="header-anchor" href="#_344-reverse-string" aria-hidden="true">#</a> 344. Reverse String</h3>`,4),E=n("strong",null,"문자열 뒤집기",-1),I={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"};function N(T,A){const e=o("ExternalLinkIcon"),l=o("Adsense");return i(),c("div",null,[u,d,n("blockquote",null,[n("p",null,[n("small",null,[s("박상길님의 "),n("a",k,[s("파이썬 알고리즘 인터뷰"),a(e)]),s(),h,s("를 토대로 "),_,s("에 실제로 제출한 Solution을 정리한 내용입니다.")])])]),b,m,n("p",null,[v,s(),n("small",null,[n("a",g,[s("Link"),a(e)])])]),f,a(l),w,n("ol",null,[n("li",null,[n("a",y,[s("isalnum()"),a(e)]),s(),x])]),q,n("ol",S,[n("li",null,[n("a",L,[s("Slicing"),a(e)]),s(),P])]),V,n("p",null,[E,s(),n("small",null,[n("a",I,[s("Link"),a(e)])])])])}const C=p(r,[["render",N],["__file","String Manipulation.html.vue"]]);export{C as default};
